// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:Message)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:Message.sender)
    pub sender: ::protobuf::MessageField<Sender>,
    // @@protoc_insertion_point(field:Message.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // message oneof groups
    pub data: ::std::option::Option<message::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // string text = 3;

    pub fn text(&self) -> &str {
        match self.data {
            ::std::option::Option::Some(message::Data::Text(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(message::Data::Text(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.data = ::std::option::Option::Some(message::Data::Text(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(message::Data::Text(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(message::Data::Text(::std::string::String::new()));
        }
        match self.data {
            ::std::option::Option::Some(message::Data::Text(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        if self.has_text() {
            match self.data.take() {
                ::std::option::Option::Some(message::Data::Text(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes image = 4;

    pub fn image(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(message::Data::Image(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_image(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_image(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(message::Data::Image(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(message::Data::Image(v))
    }

    // Mutable pointer to the field.
    pub fn mut_image(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(message::Data::Image(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(message::Data::Image(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(message::Data::Image(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_image(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_image() {
            match self.data.take() {
                ::std::option::Option::Some(message::Data::Image(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .File file = 5;

    pub fn file(&self) -> &File {
        match self.data {
            ::std::option::Option::Some(message::Data::File(ref v)) => v,
            _ => <File as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_file(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_file(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(message::Data::File(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: File) {
        self.data = ::std::option::Option::Some(message::Data::File(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file(&mut self) -> &mut File {
        if let ::std::option::Option::Some(message::Data::File(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(message::Data::File(File::new()));
        }
        match self.data {
            ::std::option::Option::Some(message::Data::File(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file(&mut self) -> File {
        if self.has_file() {
            match self.data.take() {
                ::std::option::Option::Some(message::Data::File(v)) => v,
                _ => panic!(),
            }
        } else {
            File::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Sender>(
            "sender",
            |m: &Message| { &m.sender },
            |m: &mut Message| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &Message| { &m.timestamp },
            |m: &mut Message| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "text",
            Message::has_text,
            Message::text,
            Message::set_text,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "image",
            Message::has_image,
            Message::image,
            Message::set_image,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, File>(
            "file",
            Message::has_file,
            Message::file,
            Message::mut_file,
            Message::set_file,
        ));
        oneofs.push(message::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sender)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                26 => {
                    self.data = ::std::option::Option::Some(message::Data::Text(is.read_string()?));
                },
                34 => {
                    self.data = ::std::option::Option::Some(message::Data::Image(is.read_bytes()?));
                },
                42 => {
                    self.data = ::std::option::Option::Some(message::Data::File(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &message::Data::Text(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &message::Data::Image(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
                &message::Data::File(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sender.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &message::Data::Text(ref v) => {
                    os.write_string(3, v)?;
                },
                &message::Data::Image(ref v) => {
                    os.write_bytes(4, v)?;
                },
                &message::Data::File(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.sender.clear();
        self.timestamp.clear();
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            sender: ::protobuf::MessageField::none(),
            timestamp: ::protobuf::MessageField::none(),
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message`
pub mod message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:Message.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:Message.text)
        Text(::std::string::String),
        // @@protoc_insertion_point(oneof_field:Message.image)
        Image(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:Message.file)
        File(super::File),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Message as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

// @@protoc_insertion_point(message:Sender)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Sender {
    // message fields
    // @@protoc_insertion_point(field:Sender.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:Sender.uuid)
    pub uuid: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:Sender.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sender {
    fn default() -> &'a Sender {
        <Sender as ::protobuf::Message>::default_instance()
    }
}

impl Sender {
    pub fn new() -> Sender {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Sender| { &m.name },
            |m: &mut Sender| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &Sender| { &m.uuid },
            |m: &mut Sender| { &mut m.uuid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sender>(
            "Sender",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sender {
    const NAME: &'static str = "Sender";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.uuid = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.uuid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.uuid.is_empty() {
            os.write_bytes(2, &self.uuid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sender {
        Sender::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.uuid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sender {
        static instance: Sender = Sender {
            name: ::std::string::String::new(),
            uuid: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sender {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sender").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sender {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sender {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:File)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct File {
    // message fields
    // @@protoc_insertion_point(field:File.filename)
    pub filename: ::std::string::String,
    // @@protoc_insertion_point(field:File.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:File.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a File {
    fn default() -> &'a File {
        <File as ::protobuf::Message>::default_instance()
    }
}

impl File {
    pub fn new() -> File {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "filename",
            |m: &File| { &m.filename },
            |m: &mut File| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &File| { &m.data },
            |m: &mut File| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<File>(
            "File",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for File {
    const NAME: &'static str = "File";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filename = is.read_string()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.filename.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filename);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.filename.is_empty() {
            os.write_string(1, &self.filename)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> File {
        File::new()
    }

    fn clear(&mut self) {
        self.filename.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static File {
        static instance: File = File {
            filename: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for File {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("File").unwrap()).clone()
    }
}

impl ::std::fmt::Display for File {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for File {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:MessageRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MessageRequest {
    // message fields
    // @@protoc_insertion_point(field:MessageRequest.sender)
    pub sender: ::protobuf::MessageField<Sender>,
    // @@protoc_insertion_point(field:MessageRequest.since)
    pub since: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:MessageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageRequest {
    fn default() -> &'a MessageRequest {
        <MessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl MessageRequest {
    pub fn new() -> MessageRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Sender>(
            "sender",
            |m: &MessageRequest| { &m.sender },
            |m: &mut MessageRequest| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "since",
            |m: &MessageRequest| { &m.since },
            |m: &mut MessageRequest| { &mut m.since },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageRequest>(
            "MessageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageRequest {
    const NAME: &'static str = "MessageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sender)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.since)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.since.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sender.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.since.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageRequest {
        MessageRequest::new()
    }

    fn clear(&mut self) {
        self.sender.clear();
        self.since.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageRequest {
        static instance: MessageRequest = MessageRequest {
            sender: ::protobuf::MessageField::none(),
            since: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb7\x01\n\
    \x07Message\x12\x1f\n\x06sender\x18\x01\x20\x01(\x0b2\x07.SenderR\x06sen\
    der\x128\n\ttimestamp\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Timestam\
    pR\ttimestamp\x12\x14\n\x04text\x18\x03\x20\x01(\tH\0R\x04text\x12\x16\n\
    \x05image\x18\x04\x20\x01(\x0cH\0R\x05image\x12\x1b\n\x04file\x18\x05\
    \x20\x01(\x0b2\x05.FileH\0R\x04fileB\x06\n\x04data\"0\n\x06Sender\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x12\n\x04uuid\x18\x02\x20\
    \x01(\x0cR\x04uuid\"6\n\x04File\x12\x1a\n\x08filename\x18\x01\x20\x01(\t\
    R\x08filename\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\"c\n\x0eMe\
    ssageRequest\x12\x1f\n\x06sender\x18\x01\x20\x01(\x0b2\x07.SenderR\x06se\
    nder\x120\n\x05since\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Timestamp\
    R\x05sinceb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Message::generated_message_descriptor_data());
            messages.push(Sender::generated_message_descriptor_data());
            messages.push(File::generated_message_descriptor_data());
            messages.push(MessageRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
